/* eslint-disable react-hooks/exhaustive-deps */
'use client';

// Global imports
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

// Component imports
import { Header } from '@/components/Header';
import { Loader } from '@/components/Loader';

// Type imports
import { IGuest, IParty } from '@/types';

// Hook imports
import { useCookies } from '@/hooks/useCookies';

// Style imports
import styles from '../../styles/Home.module.scss';

const tmpToken =
  'c359b916042b605b9208a5cd996d58b87e3d8df1eadf721aaab0108f3e523bbcb4ea2ba0a1feafb0321d2d98ceb636ad6c631294d2af0b4ab673aa60e6b1327298c20a3feb9586b6ce877f25f93c28f1d060df4dc328e467de709a3dcc9ebf660d517db5e4d4cc0d141329f062b87f8292f6d9ed3af3ab9db00996de063f4181';

// Static data
const navLinks = [
  {
    href: '/',
    text: 'Home'
  },
  {
    href: '/rsvp',
    text: 'RSVP'
  },
  {
    href: '/#itinary',
    text: 'Itinary'
  }
];

export default function RSVP() {
  const cookies = useCookies();
  const router = useRouter();
  const [partyId, setPartyId] = useState<string>();
  const [partyData, setPartyData] = useState<IParty>();

  const [formData, setFormData] = useState();

  // Get invite from cookies
  useEffect(() => {
    const inviteCookie = cookies.get('inviteCode');
    console.log('inviteCookie', inviteCookie);

    if (!inviteCookie) router.replace('/');
    if (inviteCookie) setPartyId(inviteCookie);
  }, []);

  // Fetch and set party data
  useEffect(() => {
    if (partyId) {
      const getPartyData = async () => {
        const partyResponse = await fetch(
          `http://localhost:1337/api/parties/${partyId}?populate=*`,
          {
            method: 'GET',
            headers: {
              Authorization: `Bearer ${tmpToken}`
            }
          }
        );
        const dataJson = await partyResponse.json();
        setPartyData(dataJson.data);

        // Initialize formData with the party data
        const initialFormData = dataJson.data?.guests.reduce((acc, guest: IGuest) => {
          acc[guest.id] = { rsvp: guest.rsvp, message: guest.message || '' };
          return acc;
        }, {});
        setFormData(initialFormData);
      };

      getPartyData();
    }
  }, [partyId]);

  useEffect(() => {
    console.log('Formdata changes:', formData);
  }, [formData]);

  const partyMemberNames = () => {
    return partyData?.guests.map((guest, idx) => {
      let joiner = '';
      switch (idx) {
        case partyData.guests.length - 2: {
          joiner = ' & ';
          break;
        }
        case partyData.guests.length - 1: {
          joiner = '.';
          break;
        }
        default: {
          joiner = ', ';
          break;
        }
      }
      return guest.name + joiner;
    });
  };

  const handleInputChange = (guestId: number, field: string, value: string | boolean) => {
    setFormData(prevState => ({
      ...prevState,
      [guestId]: {
        ...prevState[guestId],
        [field]: value
      }
    }));
  };

  const handleSubmit = async () => {
    if (formData) {
      try {
        const updatePromises = partyData?.guests.map(guest => {
          const payload = {
            data: {
              rsvp: formData[guest.id].rsvp ? new Date() : null,
              message: formData[guest.id].message
            }
          };
          return fetch(`http://localhost:1337/api/guests/${guest.documentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${tmpToken}`
            },
            body: JSON.stringify(payload)
          });
        });

        const results = await Promise.all(updatePromises);

        if (results.every(res => res.ok)) {
          console.log('All guests updated successfully');
        } else {
          console.error('Some updates failed', results);
        }
      } catch (error) {
        console.error('Error submitting data:', error);
      }
    }
  };

  return (
    <>
      <Head>
        <title>David & Rebeca&apos;s wedding</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header links={navLinks} />
      {!partyData ? (
        <Loader />
      ) : (
        <div className={styles.mainView}>
          <div className="">
            <h1>Welcome</h1>
            <p>{partyMemberNames()}</p>
          </div>
          <div>
            {partyData?.guests.map(guest => {
              return (
                <div key={guest.name}>
                  <div>
                    <p>{guest.name + ' ' + guest.surname}</p>
                    <input
                      type="checkbox"
                      name=""
                      id=""
                      checked={formData[guest.id].rsvp}
                      onChange={e =>
                        handleInputChange(guest.id, 'rsvp', e.target.checked)
                      }
                    />
                  </div>
                  <input
                    type="text"
                    value={formData[guest.id].message}
                    onChange={e => handleInputChange(guest.id, 'message', e.target.value)}
                  />
                </div>
              );
            })}
          </div>
          <div>
            <button onClick={handleSubmit}>Enviar</button>
          </div>
        </div>
      )}
    </>
  );
}
